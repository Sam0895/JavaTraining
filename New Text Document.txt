[2:19 PM, 6/10/2024] Samü§ç: public class DatabaseConnectionSingleton {
    private static DatabaseConnectionSingleton instance;
    private String connection;

    // Private constructor to prevent instantiation from outside
    private DatabaseConnectionSingleton() {
        // Initialize database connection here
        connection = "Connected to the database"; // Placeholder for actual connection
    }

    // Method to get the singleton instance
    public static synchronized DatabaseConnectionSingleton getInstance() {
        if (instance == null) {
            instance = new DatabaseConnectionSingleton();
        }
        return instance;
    }

    // Method to get database connection
    public String getConnection() {
        return connection;
    }
}
[2:19 PM, 6/10/2024] Samü§ç: public class ShapeFactory {
    // Method to create different shapes
    public static Shape createShape(String shapeType) {
        if (shapeType.equalsIgnoreCase("Circle")) {
            return new Circle();
        } else if (shapeType.equalsIgnoreCase("Square")) {
            return new Square();
        } else if (shapeType.equalsIgnoreCase("Rectangle")) {
            return new Rectangle();
        } else {
            throw new IllegalArgumentException("Invalid shape type");
        }
    }
}
[2:19 PM, 6/10/2024] Samü§ç: public interface Shape {
    String draw();
}
[2:19 PM, 6/10/2024] Samü§ç: public class Circle implements Shape {
    @Override
    public String draw() {
        return "Drawing Circle";
    }
}
[2:20 PM, 6/10/2024] Samü§ç: public class Square implements Shape {
    @Override
    public String draw() {
        return "Drawing Square";
    }
}
[2:20 PM, 6/10/2024] Samü§ç: public class Rectangle implements Shape {
    @Override
    public String draw() {
        return "Drawing Rectangle";
    }
}