[3:51 PM, 6/7/2024] Mohana Bangalan ü§ç:   @Test
    public void testMultiply() {
        assertEquals(6, mathOperations.multiply(2, 3));
        assertEquals(-6, mathOperations.multiply(2, -3));
        assertEquals(0, mathOperations.multiply(2, 0));
    }

    @Test
    public void testDivide() {
        assertEquals(2, mathOperations.divide(6, 3));
        assertEquals(-2, mathOperations.divide(6, -3));
        
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            mathOperations.divide(1, 0);
        });
        assertEquals("Division by zero is not allowed.", exception.getMessage());
    }
}
[3:51 PM, 6/7/2024] Mohana Bangalan ü§ç: import org.junit.*;
import static org.junit.Assert.*;

public class MyTestClass {

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
        // Code to set up resources before any of the tests run
        System.out.println("Executing setUpBeforeClass");
        // For example, initializing a database connection
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
        // Code to release resources after all the tests have run
        System.out.println("Executing tearDownAfterClass");
        // For example, closing a database connection
    }

    @Before
    public void setUp() throws Exception {
        // Code to set up resources before each individual test
        System.out.println("Executing setUp");
        // For example, creating a new instance of the class under test
    }

    @After
    public void tearDown() throws Exception {
        // Code to release resources after each individual test
        System.out.println("Executing tearDown");
        // For example, nullifying the instance of the class under test
    }

    @Test
    public void testMethod1() {
        System.out.println("Executing testMethod1");
        // Your test code here
        assertEquals("expected", "actual");
    }

    @Test
    public void testMethod2() {
        System.out.println("Executing testMethod2");
        // Your test code here
        assertTrue("some condition", true);
    }

    @Test
    public void testMethod3() {
        System.out.println("Executing testMethod3");
        // Your test code here
        assertNotNull("object to test");
    }
}




[3:51 PM, 6/7/2024] Mohana Bangalan ü§ç: public class StringUtils {

    public static String reverse(String input) {
        if (input == null) {
            return null;
        }
        return new StringBuilder(input).reverse().toString();
    }

    public static boolean isPalindrome(String input) {
        if (input == null) {
            return false;
        }
        String reversed = reverse(input);
        return input.equals(reversed);
    }

    public static String toUpperCase(String input) {
        if (input == null) {
            return null;
        }
        return input.toUpperCase();
    }
}
[3:51 PM, 6/7/2024] Mohana Bangalan ü§ç: import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;

public class StringUtilsTest {

    @Test
    public void testReverse() {
        assertEquals("dcba", StringUtils.reverse("abcd"));
        assertEquals("54321", StringUtils.reverse("12345"));
        assertEquals("", StringUtils.reverse(""));
        assertEquals(null, StringUtils.reverse(null));
    }

    @Test
    public void testIsPalindrome() {
        assertTrue(StringUtils.isPalindrome("racecar"));
        assertTrue(StringUtils.isPalindrome("madam"));
        assertFalse(StringUtils.isPalindrome("hello"));
        assertFalse(StringUtils.isPalindrome("world"));
        assertFalse(StringUtils.isPalindrome(null));
        assertTrue(StringUtils.isPalindrome("")); // An empty string is considered a palindrome
    }

    @Test
    public void testToUpperCase() {
        assertEquals("HELLO", StringUtils.toUpperCase("hello"));
        assertEquals("WORLD", StringUtils.toUpperCase("world"));
        assertEquals("", StringUtils.toUpperCase(""));
        assertEquals(null, StringUtils.toUpperCase(null));
    }
}